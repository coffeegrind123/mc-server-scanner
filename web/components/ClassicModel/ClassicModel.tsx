/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, {
	ForwardedRef,
	MutableRefObject,
	RefObject,
	useRef,
} from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
	nodes: {
		Cube: THREE.Mesh;
		Cube001: THREE.Mesh;
		Cube002: THREE.Mesh;
		Cube003: THREE.Mesh;
		Cube004: THREE.Mesh;
		Cube005: THREE.Mesh;
	};
	materials: {};
};

const ClassicModel = React.forwardRef(
	(props: JSX.IntrinsicElements['group'], ref: ForwardedRef<THREE.Group>) => {
		const { nodes, materials } = useGLTF('/models/classic.glb') as GLTFResult;
		return (
			<group ref={ref} {...props} dispose={null}>
				<mesh
					geometry={nodes.Cube.geometry}
					material={nodes.Cube.material}
					position={[-0.1, 0.4, -0.04]}
					scale={[2.18, 2.31, 0.67]}
				/>
				<mesh
					geometry={nodes.Cube001.geometry}
					material={nodes.Cube001.material}
					position={[0.15, 0.4, -0.04]}
					scale={[2.18, 2.31, 0.67]}
				/>
				<mesh
					geometry={nodes.Cube002.geometry}
					material={nodes.Cube002.material}
					position={[0.02, 1.15, -0.04]}
					scale={[4.36, 2.31, 0.67]}
				/>
				<mesh
					geometry={nodes.Cube003.geometry}
					material={nodes.Cube003.material}
					position={[-0.35, 1.15, -0.04]}
					scale={[2.18, 2.31, 0.67]}
				/>
				<mesh
					geometry={nodes.Cube004.geometry}
					material={nodes.Cube004.material}
					position={[0.4, 1.15, -0.04]}
					scale={[2.18, 2.31, 0.67]}
				/>
				<mesh
					geometry={nodes.Cube005.geometry}
					material={nodes.Cube005.material}
					position={[0.02, 1.78, -0.04]}
					scale={[4.36, 1.54, 1.34]}
				/>
			</group>
		);
	}
);

export default ClassicModel;

useGLTF.preload('/classic.glb');
